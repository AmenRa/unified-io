{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"\u26a1\ufe0f Introduction","text":"<p>unified-io is a Python utility that attempts to unify several I/O operations (i.e., read/write data in different formats) under a similar interface while making them more concise and user-friendly.</p> <p>The library provides a unified interface for reading/writing files, which is based on the following principles:  </p> <ul> <li>Read/write interfaces consist of concise functions with similar signatures.  </li> <li>Read/write interfaces allows passing keyword arguments to the underlying I/O functions to preserve flexibility.  </li> <li>Read operations can be performed lazily using generators.  </li> <li>Before reading/writing, the user can specify a callback function that will be applied to each element of the data stream.  </li> <li>read functions have load aliases (e.g., <code>read_csv</code> has a <code>load_csv</code> alias) and write functions have save aliases (e.g., <code>write_csv</code> has a <code>save_csv</code> alias.  </li> <li>Use very efficient stuff for each format (e.g., <code>orjson</code> for <code>json</code> files). Suggestions are welcome!</li> </ul>"},{"location":"#supported-formats","title":"\u2728 Supported formats","text":"<ul> <li>CSV and similar formats (e.g., TSV, PSV, etc.)</li> <li>GZIP</li> <li>JSON</li> <li>JSONl</li> <li>LZ4</li> <li>Numpy (<code>.npy</code>)</li> <li>Pickle</li> <li>Text</li> </ul>"},{"location":"#requirements","title":"\ud83d\udd0c Requirements","text":"<pre><code>python&gt;=3.7\n</code></pre>"},{"location":"#installation","title":"\ud83d\udcbe Installation","text":"<pre><code>pip install unified-io\n</code></pre>"},{"location":"#examples","title":"\ud83d\udca1 Examples","text":"<p>The API is designed to be as simple as possible. For example, the following code snippet reads a CSV file, applies a callback function to each element of the data stream, and writes the result to a JSONl file: <pre><code>from unified_io import read_csv, write_jsonl\n\ndef callback(x):\n    return {\"id\": x[\"id\"], \"title\": x[\"title\"].lower()}\n\n# Using a generator we avoid loading the entire file into memory\ndata = read_csv('input.csv', callback=callback, generator=True)\n\nwrite_jsonl('output.jsonl', data)\n</code></pre></p>"},{"location":"#feature-requests","title":"\ud83c\udf81 Feature Requests","text":"<p>Would you like to see other features implemented? Please, open a feature request.</p>"},{"location":"#want-to-contribute","title":"\ud83e\udd18 Want to contribute?","text":"<p>Would you like to contribute? Please, drop me an e-mail.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>unified-io is an open-sourced software licensed under the MIT license.</p>"},{"location":"csv/","title":"Csv","text":""},{"location":"csv/#unified_io.handlers.csv_handler.read_csv","title":"<code>read_csv(path, callback=None, generator=False, encoding='utf-8', kwargs=None)</code>","text":"<p>Reads a CSV file into a list of dictionaries.</p> <pre><code>from unified_io import read_csv\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>callback</code> <code>Callable</code> <p>Callback to apply to each element. Defaults to None.</p> <code>None</code> <code>generator</code> <code>bool</code> <p>Whether to return a generator instead of a list. Defaults to False.</p> <code>False</code> <code>encoding</code> <code>str</code> <p>File encoding. Defaults to \"utf-8\".</p> <code>'utf-8'</code> <code>kwargs</code> <code>Dict</code> <p>Keyword arguments to pass to <code>csv.DictReader</code>. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: List of dictionaries.</p>"},{"location":"csv/#unified_io.handlers.csv_handler.write_csv","title":"<code>write_csv(x, path, callback=None, encoding='utf-8', kwargs=None)</code>","text":"<p>Writes a list of dictionaries to a CSV file.</p> <pre><code>from unified_io import write_csv\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>List[Dict]</code> <p>List of dictionaries.</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>callback</code> <code>Callable</code> <p>Callback to apply to each element before writing. Defaults to None.</p> <code>None</code> <code>encoding</code> <code>str</code> <p>File encoding. Defaults to \"utf-8\".</p> <code>'utf-8'</code> <code>kwargs</code> <code>Dict</code> <p>Keyword arguments to pass to <code>csv.DictWriter</code>. Defaults to None.</p> <code>None</code>"},{"location":"gzip/","title":"Gzip","text":""},{"location":"gzip/#unified_io.handlers.gzip_handler.read_gzip","title":"<code>read_gzip(path)</code>","text":"<p>Reads a gzip file into a string.</p> <pre><code>from unified_io import read_gzip\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>File contents.</p>"},{"location":"gzip/#unified_io.handlers.gzip_handler.read_gzip_json_list","title":"<code>read_gzip_json_list(path, callback=None, generator=False)</code>","text":"<p>Reads a gzipped JSONl file into a list of dictionaries.</p> <pre><code>from unified_io import read_gzip_json_list\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>callback</code> <code>Callable</code> <p>Callback to apply to each element. Defaults to None.</p> <code>None</code> <code>generator</code> <code>bool</code> <p>Whether to return a generator instead of a list. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: List of dictionaries.</p>"},{"location":"gzip/#unified_io.handlers.gzip_handler.read_gzip_list","title":"<code>read_gzip_list(path, callback=None, generator=False)</code>","text":"<p>Reads a gzip file into a list of strings.</p> <pre><code>from unified_io import read_gzip_list\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>callback</code> <code>Callable</code> <p>Callback to apply to each element. Defaults to None.</p> <code>None</code> <code>generator</code> <code>bool</code> <p>Whether to return a generator instead of a list. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>List</code> <code>List[str]</code> <p>List of strings.</p>"},{"location":"gzip/#unified_io.handlers.gzip_handler.write_gzip","title":"<code>write_gzip(x, path)</code>","text":"<p>Writes a string into a gzip file.</p> <pre><code>from unified_io import read_gzip\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>str</code> <p>Input string.</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required"},{"location":"gzip/#unified_io.handlers.gzip_handler.write_gzip_json_list","title":"<code>write_gzip_json_list(x, path, callback=None)</code>","text":"<p>Writes a list of dictionaries into a a gzipped JSONl file.</p> <pre><code>from unified_io import write_gzip_json_list\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>List[str]</code> <p>List of dictionaries.</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>callback</code> <code>Callable</code> <p>Callback to apply to each element before writing. Defaults to None.</p> <code>None</code>"},{"location":"gzip/#unified_io.handlers.gzip_handler.write_gzip_list","title":"<code>write_gzip_list(x, path, callback=None)</code>","text":"<p>Writes a list of strings into a gzip file.</p> <pre><code>from unified_io import write_gzip_list\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>List[str]</code> <p>List of strings.</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>callback</code> <code>Callable</code> <p>Callback to apply to each element before writing. Defaults to None.</p> <code>None</code>"},{"location":"json/","title":"Json","text":""},{"location":"json/#unified_io.handlers.json_handler.read_json","title":"<code>read_json(path)</code>","text":"<p>Reads a JSON file into a dictionary.</p> <pre><code>from unified_io import read_json\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>Dictionary.</p>"},{"location":"json/#unified_io.handlers.json_handler.write_json","title":"<code>write_json(x, path, kwargs=None)</code>","text":"<p>Writes a dictionary into a JSON file.</p> <pre><code>from unified_io import write_json\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Dict</code> <p>Dictionary.</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>kwargs</code> <code>Dict</code> <p>Keyword arguments to pass to <code>orjson.dumps</code>. If <code>None</code>, <code>kwargs = {\"option\": (orjson.OPT_INDENT_2 | orjson.OPT_SERIALIZE_NUMPY)}</code>. Defaults to None.</p> <code>None</code>"},{"location":"jsonl/","title":"Jsonl","text":""},{"location":"jsonl/#unified_io.handlers.jsonl_handler.read_jsonl","title":"<code>read_jsonl(path, callback=None, generator=False)</code>","text":"<p>Reads a JSONl file into a list of dictionaries.</p> <pre><code>from unified_io import read_jsonl\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>callback</code> <code>Callable</code> <p>Callback to apply to each element. Defaults to None.</p> <code>None</code> <code>generator</code> <code>bool</code> <p>Whether to return a generator. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: List of dictionaries.</p>"},{"location":"jsonl/#unified_io.handlers.jsonl_handler.write_jsonl","title":"<code>write_jsonl(x, path, callback=None, kwargs=None)</code>","text":"<p>Writes a list of dictionaries into a JSONL file.</p> <pre><code>from unified_io import write_jsonl\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>List[Dict]</code> <p>List of dictionaries.</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>callback</code> <code>Callable</code> <p>Callback to apply to each element.</p> <code>None</code> <code>kwargs</code> <code>Dict</code> <p>Keyword arguments to pass to <code>orjson.dumps</code>. If <code>None</code>, <code>kwargs = {\"option\": (orjson.OPT_SERIALIZE_NUMPY)}</code>. Defaults to None.</p> <code>None</code>"},{"location":"list/","title":"List","text":""},{"location":"list/#unified_io.handlers.list_handler.read_list","title":"<code>read_list(path, callback=None, generator=False, encoding='utf-8')</code>","text":"<p>Reads the lines of a text file into a list of strings.</p> <pre><code>from unified_io import read_list\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>callback</code> <code>Callable</code> <p>Callback to apply to each element. Defaults to None.</p> <code>None</code> <code>generator</code> <code>bool</code> <p>Whether to return a generator. Defaults to False.</p> <code>False</code> <code>encoding</code> <code>str</code> <p>File encoding. Defaults to \"utf-8\".</p> <code>'utf-8'</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: List of strings.</p>"},{"location":"list/#unified_io.handlers.list_handler.write_list","title":"<code>write_list(x, path, callback=None, encoding='utf-8')</code>","text":"<p>Writes a list of strings into a text file.</p> <pre><code>from unified_io import write_list\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>List[str]</code> <p>List of strings.</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>callback</code> <code>Callable</code> <p>Callback to apply to each element. Defaults to None.</p> <code>None</code> <code>encoding</code> <code>str</code> <p>File encoding. Defaults to \"utf-8\".</p> <code>'utf-8'</code>"},{"location":"lz4/","title":"Lz4","text":""},{"location":"lz4/#unified_io.handlers.lz4_handler.read_lz4","title":"<code>read_lz4(path)</code>","text":"<p>Reads a lz4 file.</p> <pre><code>from unified_io import read_lz4\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>File path.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Output.</p>"},{"location":"lz4/#unified_io.handlers.lz4_handler.write_lz4","title":"<code>write_lz4(x, path)</code>","text":"<p>Writes bytes into a lz4 file.</p> <pre><code>from unified_io import write_lz4\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>bytes</code> <p>Input bytes.</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required"},{"location":"numpy/","title":"Numpy","text":""},{"location":"numpy/#unified_io.handlers.numpy_handler.read_numpy","title":"<code>read_numpy(path, kwargs=None)</code>","text":"<p>Reads a npy file into a Numpy array.</p> <pre><code>from unified_io import read_numpy\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>kwargs</code> <code>Dict</code> <p>Keyword arguments to pass to <code>np.load</code>. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>np.ndarray</code> <p>np.ndarray: Numpy Array</p>"},{"location":"numpy/#unified_io.handlers.numpy_handler.write_numpy","title":"<code>write_numpy(x, path, kwargs=None)</code>","text":"<p>Writes a Numpy Array into a npy file.</p> <pre><code>from unified_io import write_numpy\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>np.ndarray</code> <p>Numpy Array.</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>kwargs</code> <code>Dict</code> <p>Keyword arguments to pass to <code>np.save</code>. Defaults to None.</p> <code>None</code>"},{"location":"pickle/","title":"Pickle","text":""},{"location":"pickle/#unified_io.handlers.pickle_handler.read_pickle","title":"<code>read_pickle(path, kwargs=None)</code>","text":"<p>Reads a pickle file.</p> <pre><code>from unified_io import read_pickle\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>kwargs</code> <code>Dict</code> <p>Keyword arguments to pass to <code>pickle.load</code>. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Output.</p>"},{"location":"pickle/#unified_io.handlers.pickle_handler.write_pickle","title":"<code>write_pickle(x, path, kwargs=None)</code>","text":"<p>Writes the input to a pickle file.</p> <pre><code>from unified_io import write_pickle\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>Input.</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>kwargs</code> <code>Dict</code> <p>Keyword arguments to pass to <code>pickle.dump</code>. Defaults to None.</p> <code>None</code>"},{"location":"string/","title":"String","text":""},{"location":"string/#unified_io.handlers.string_handler.read","title":"<code>read(path, encoding='utf-8')</code>","text":"<p>Reads a text file into a single string.</p> <pre><code>from unified_io import read\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>encoding</code> <code>str</code> <p>File encoding. Defaults to \"utf-8\".</p> <code>'utf-8'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>String.</p>"},{"location":"string/#unified_io.handlers.string_handler.write","title":"<code>write(x, path, encoding='utf-8')</code>","text":"<p>Writes a string into a text file.</p> <pre><code>from unified_io import write\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>str</code> <p>String.</p> required <code>path</code> <code>Union[str, Path]</code> <p>File path.</p> required <code>encoding</code> <code>str</code> <p>File encoding. Defaults to \"utf-8\".</p> <code>'utf-8'</code>"}]}